{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport queryString from 'query-string';\nimport axios from 'axios';\nimport './Cards.scss';\n\nvar Cards = /*#__PURE__*/function (_React$Component) {\n  _inherits(Cards, _React$Component);\n\n  var _super = _createSuper(Cards);\n\n  function Cards(props) {\n    var _this;\n\n    _classCallCheck(this, Cards);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      filters: props.filters,\n      // filters object\n      response: {},\n      // response for cards data\n      isFetching: false // flag for fetching data\n\n    };\n\n    _this._bind();\n\n    return _this;\n  } // bind the methods to context\n\n\n  _createClass(Cards, [{\n    key: \"_bind\",\n    value: function _bind() {\n      this.getData = this.getData.bind(this);\n    } // fetch data on mount\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var filters = this.state.filters;\n\n      var _params = 0 !== Object.keys(filters).length ? \"?\".concat(queryString.stringify(filters)) : null;\n\n      this.getData(_params, filters).then(function (res) {\n        _this2.setState({\n          response: res,\n          isFetching: false\n        });\n      })[\"catch\"](function (e) {\n        return console.error(e);\n      });\n      ;\n    } // check if new filter changed\n\n  }, {\n    key: \"componentDidUpdate\",\n    // check if new data needs to be fetched in case filters have changed\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      if (JSON.stringify(this.state.filters) !== JSON.stringify(prevState.filters)) {\n        var _params = 0 !== Object.keys(this.state.filters).length ? \"?\".concat(queryString.stringify(this.state.filters)) : null;\n\n        this.getData(_params, this.state.filters).then(function (res) {\n          _this3.setState({\n            response: res,\n            isFetching: false\n          });\n        })[\"catch\"](function (e) {\n          return console.error(e);\n        });\n      }\n    } // make an API request and set the state with the recieved response\n\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_params, filters) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  isFetching: true\n                });\n                _context.prev = 1;\n                _context.next = 4;\n                return axios.get(\"https://api.spacexdata.com/v3/launches?limit=100\".concat(_params));\n\n              case 4:\n                res = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(_context.t0);\n\n              case 10:\n                _context.prev = 10;\n\n                if (null !== _params) {\n                  window.history.replaceState(filters, 'params', \"\".concat(_params));\n                }\n\n                ;\n                return _context.finish(10);\n\n              case 14:\n                return _context.abrupt(\"return\", res);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7, 10, 14]]);\n      }));\n\n      function getData(_x, _x2) {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isFetching = _this$state.isFetching,\n          response = _this$state.response; // if response has data then render cards\n\n      if (undefined !== response && 0 !== Object.keys(response).length && !isFetching) {\n        return __jsx(\"div\", {\n          className: \"cards__container\"\n        }, response.data && 0 < response.data.length ? response.data.map(function (item, index) {\n          return __jsx(\"div\", {\n            className: \"cards__container__card hover\",\n            key: \"\".concat(item.mission_name, \"_\").concat(index)\n          }, __jsx(\"figure\", null, __jsx(\"img\", {\n            className: \"cards__container__card__icon\",\n            alt: \"Mission Logo\",\n            src: item.links.mission_patch || 'https://via.placeholder.com/150',\n            width: \"80%\",\n            height: \"60%\"\n          })), __jsx(\"div\", {\n            className: \"cards__container__card__info\"\n          }, __jsx(\"div\", {\n            className: \"cards__container__card__info__title\"\n          }, \"\".concat(item.mission_name, \" # \").concat(item.flight_number)), __jsx(\"div\", {\n            className: \"cards__container__card__info__item\"\n          }, __jsx(\"span\", {\n            className: \"cards__container__card__info__item__key\"\n          }, \"Mission Ids :\"), __jsx(\"ul\", {\n            className: \"cards__container__card__info__item__list\"\n          }, item.mission_id.map(function (mission) {\n            return __jsx(\"li\", {\n              className: \"cards__container__card__info__item__value\",\n              key: mission\n            }, \" \", mission);\n          })), __jsx(\"br\", null)), __jsx(\"div\", {\n            className: \"cards__container__card__info__item\"\n          }, __jsx(\"span\", {\n            className: \"cards__container__card__info__item__key\"\n          }, \"Launch Year :\"), __jsx(\"span\", {\n            className: \"cards__container__card__info__item__value\"\n          }, item.launch_year)), __jsx(\"div\", {\n            className: \"cards__container__card__info__item\"\n          }, __jsx(\"span\", {\n            className: \"cards__container__card__info__item__key\"\n          }, \"Successful Launch :\"), __jsx(\"span\", {\n            className: \"cards__container__card__info__item__value\"\n          }, null === item.launch_success ? 'null' : item.launch_success.toString())), __jsx(\"div\", {\n            className: \"cards__container__card__info__item\"\n          }, __jsx(\"span\", {\n            className: \"cards__container__card__info__item__key\"\n          }, \"Successful Landing :\"), __jsx(\"span\", {\n            className: \"cards__container__card__info__item__value\"\n          }, null === item.rocket.first_stage.cores[0].land_success ? 'null' : item.rocket.first_stage.cores[0].land_success.toString()))));\n        }) : __jsx(\"div\", {\n          className: \"no-data\"\n        }, \"No Data Found\"));\n      } else if (isFetching) {\n        // if the component is fetching data show preloaders\n        return __jsx(\"div\", {\n          className: \"cards__container\"\n        }, [1, 2, 3, 4].map(function (val, index) {\n          return __jsx(\"div\", {\n            className: \"cards__container__card__preloader\",\n            key: index\n          }, __jsx(\"div\", {\n            className: \"cards__container__card__icon__preloader\"\n          }), __jsx(\"div\", {\n            className: \"cards__container__card__info__preloader\"\n          }), __jsx(\"div\", {\n            className: \"cards__container__card__info__preloader\"\n          }), __jsx(\"div\", {\n            className: \"cards__container__card__info__preloader\"\n          }));\n        }));\n      } else return null;\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (JSON.stringify(prevState.filters) !== JSON.stringify(nextProps.filters)) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          filters: nextProps.filters\n        });\n      } else return null;\n    }\n  }]);\n\n  return Cards;\n}(React.Component);\n\nexport default Cards;","map":null,"metadata":{},"sourceType":"module"}