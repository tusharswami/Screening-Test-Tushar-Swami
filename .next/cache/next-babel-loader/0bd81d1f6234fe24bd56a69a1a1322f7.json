{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport queryString from 'query-string';\nimport axios from 'axios';\nimport css from '../static/scss/card.scss';\n\nclass Cards extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filters: props.filters,\n      // filters object\n      response: {},\n      // response for cards data\n      isFetching: false // flag for fetching data\n\n    };\n\n    this._bind();\n  } // bind the methods to context\n\n\n  _bind() {\n    this.getData = this.getData.bind(this);\n  } // fetch data on mount\n\n\n  componentDidMount() {\n    const filters = this.state.filters;\n\n    const _params = 0 !== Object.keys(filters).length ? `?${queryString.stringify(filters)}` : null;\n\n    this.getData(_params, filters).then(res => {\n      this.setState({\n        response: res,\n        isFetching: false\n      });\n    }).catch(e => console.error(e));\n    ;\n  } // check if new filter changed\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (JSON.stringify(prevState.filters) !== JSON.stringify(nextProps.filters)) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        filters: nextProps.filters\n      });\n    } else return null;\n  } // check if new data needs to be fetched in case filters have changed\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(this.state.filters) !== JSON.stringify(prevState.filters)) {\n      const _params = 0 !== Object.keys(this.state.filters).length ? `?${queryString.stringify(this.state.filters)}` : null;\n\n      this.getData(_params, this.state.filters).then(res => {\n        this.setState({\n          response: res,\n          isFetching: false\n        });\n      }).catch(e => console.error(e));\n    }\n  } // make an API request and set the state with the recieved response\n\n\n  async getData(_params, filters) {\n    this.setState({\n      isFetching: true\n    });\n    let res;\n\n    try {\n      res = await axios.get(`https://api.spacexdata.com/v3/launches?limit=100${_params}`);\n    } catch (e) {\n      console.error(e);\n    } finally {\n      if (null !== _params) {\n        window.history.replaceState(filters, 'params', `${_params}`);\n      }\n\n      ;\n    }\n\n    return res;\n  }\n\n  render() {\n    const {\n      isFetching,\n      response\n    } = this.state; // if response has data then render cards\n\n    if (undefined !== response && 0 !== Object.keys(response).length && !isFetching) {\n      return __jsx(\"div\", {\n        className: \"cards__container\"\n      }, response.data && 0 < response.data.length ? response.data.map((item, index) => {\n        return __jsx(\"div\", {\n          className: \"cards__container__card hover\",\n          key: `${item.mission_name}_${index}`\n        }, __jsx(\"figure\", null, __jsx(\"img\", {\n          className: \"cards__container__card__icon\",\n          alt: \"Mission Logo\",\n          src: item.links.mission_patch || 'https://via.placeholder.com/150',\n          width: \"80%\",\n          height: \"60%\"\n        })), __jsx(\"div\", {\n          className: \"cards__container__card__info\"\n        }, __jsx(\"div\", {\n          className: \"cards__container__card__info__title\"\n        }, `${item.mission_name} # ${item.flight_number}`), __jsx(\"div\", {\n          className: \"cards__container__card__info__item\"\n        }, __jsx(\"span\", {\n          className: \"cards__container__card__info__item__key\"\n        }, \"Mission Ids :\"), __jsx(\"ul\", {\n          className: \"cards__container__card__info__item__list\"\n        }, item.mission_id.map(mission => {\n          return __jsx(\"li\", {\n            className: \"cards__container__card__info__item__value\",\n            key: mission\n          }, \" \", mission);\n        })), __jsx(\"br\", null)), __jsx(\"div\", {\n          className: \"cards__container__card__info__item\"\n        }, __jsx(\"span\", {\n          className: \"cards__container__card__info__item__key\"\n        }, \"Launch Year :\"), __jsx(\"span\", {\n          className: \"cards__container__card__info__item__value\"\n        }, item.launch_year)), __jsx(\"div\", {\n          className: \"cards__container__card__info__item\"\n        }, __jsx(\"span\", {\n          className: \"cards__container__card__info__item__key\"\n        }, \"Successful Launch :\"), __jsx(\"span\", {\n          className: \"cards__container__card__info__item__value\"\n        }, null === item.launch_success ? 'null' : item.launch_success.toString())), __jsx(\"div\", {\n          className: \"cards__container__card__info__item\"\n        }, __jsx(\"span\", {\n          className: \"cards__container__card__info__item__key\"\n        }, \"Successful Landing :\"), __jsx(\"span\", {\n          className: \"cards__container__card__info__item__value\"\n        }, null === item.rocket.first_stage.cores[0].land_success ? 'null' : item.rocket.first_stage.cores[0].land_success.toString()))));\n      }) : __jsx(\"div\", {\n        className: \"no-data\"\n      }, \"No Data Found\"));\n    } else if (isFetching) {\n      // if the component is fetching data show preloaders\n      return __jsx(\"div\", {\n        className: \"cards__container\"\n      }, [1, 2, 3, 4].map((val, index) => {\n        return __jsx(\"div\", {\n          className: \"cards__container__card__preloader\",\n          key: index\n        }, __jsx(\"div\", {\n          className: \"cards__container__card__icon__preloader\"\n        }), __jsx(\"div\", {\n          className: \"cards__container__card__info__preloader\"\n        }), __jsx(\"div\", {\n          className: \"cards__container__card__info__preloader\"\n        }), __jsx(\"div\", {\n          className: \"cards__container__card__info__preloader\"\n        }));\n      }));\n    } else return null;\n  }\n\n}\n\nexport default Cards;","map":null,"metadata":{},"sourceType":"module"}